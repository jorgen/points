include(BuildExternal)
include(GetPackageInstallDir)

macro(Build3rdParty)
  list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake/FindPackage/SDL2)
  GetPackageInstallDir(SDL2_INSTALL_DIR sdl_build ${sdl_VERSION})
  Find_Package(SDL2 REQUIRED)
  BuildExternalCMake(sdl_build ${sdl_VERSION} ${sdl_SOURCE_DIR} "" "SDL2::SDL2;SDL2::SDL2main")
 
  list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake/FindPackage/libuv)
  GetPackageInstallDir(LIBUV_INSTALL_DIR libuv_build ${libuv_VERSION})
  Find_Package(libuv REQUIRED)
  BuildExternalCMake(libuv_build ${libuv_VERSION} ${libuv_SOURCE_DIR} "" "libuv::libuv")

if (WIN32)
  list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake/FindPackage/CURL)
  GetPackageInstallDir(CURL_INSTALL_DIR curl_build ${curl_VERSION})
  Find_Package(CURL REQUIRED)
  BuildExternalCMake(curl_build ${curl_VERSION} ${curl_SOURCE_DIR} "-DBUILD_CURL_EXE=OFF;-DHTTP_ONLY=ON" "CURL::libcurl")
endif()

  list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake/FindPackage/laszip)
  GetPackageInstallDir(LASZIP_INSTALL_DIR laszip_build ${laszip_VERSION})
  Find_Package(laszip REQUIRED)
  if (WIN32)
    set(LASZIP_CMAKE_OPTIONS "-DCMAKE_DEBUG_POSTFIX=d")
  endif()
  BuildExternalCMake(laszip_build ${laszip_VERSION} ${laszip_SOURCE_DIR} "${LASZIP_CMAKE_OPTIONS}" "laszip::api;laszip::impl")

  set(OLD_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
  set(BUILD_SHARED_LIBS OFF)
  add_subdirectory(${fmt_SOURCE_DIR})
  add_subdirectory(${glm_SOURCE_DIR})
  add_subdirectory(${catch2_SOURCE_DIR})
  set(BUILD_SHARED_LIBS ${OLD_BUILD_SHARED_LIBS})
  include(${cmakerc_SOURCE_DIR}/CMakeRC.cmake)
endmacro()
